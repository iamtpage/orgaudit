// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/pivotalservices/cf-mgmt/utils (interfaces: Manager)

package mock_utils

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *_MockManagerRecorder
}

// Recorder for MockManager (not exported)
type _MockManagerRecorder struct {
	mock *MockManager
}

func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &_MockManagerRecorder{mock}
	return mock
}

func (_m *MockManager) EXPECT() *_MockManagerRecorder {
	return _m.recorder
}

func (_m *MockManager) FileOrDirectoryExists(_param0 string) bool {
	ret := _m.ctrl.Call(_m, "FileOrDirectoryExists", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockManagerRecorder) FileOrDirectoryExists(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FileOrDirectoryExists", arg0)
}

func (_m *MockManager) FindFiles(_param0 string, _param1 string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "FindFiles", _param0, _param1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) FindFiles(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindFiles", arg0, arg1)
}

func (_m *MockManager) LoadFile(_param0 string, _param1 interface{}) error {
	ret := _m.ctrl.Call(_m, "LoadFile", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) LoadFile(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadFile", arg0, arg1)
}

func (_m *MockManager) WriteFile(_param0 string, _param1 interface{}) error {
	ret := _m.ctrl.Call(_m, "WriteFile", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) WriteFile(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteFile", arg0, arg1)
}

func (_m *MockManager) WriteFileBytes(_param0 string, _param1 []byte) error {
	ret := _m.ctrl.Call(_m, "WriteFileBytes", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) WriteFileBytes(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteFileBytes", arg0, arg1)
}
