// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/pivotalservices/cf-mgmt/cloudcontroller (interfaces: Manager)

package mock_cloudcontroller

import (
	gomock "github.com/golang/mock/gomock"
	cloudcontroller "github.com/pivotalservices/cf-mgmt/cloudcontroller"
)

// Mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *_MockManagerRecorder
}

// Recorder for MockManager (not exported)
type _MockManagerRecorder struct {
	mock *MockManager
}

func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &_MockManagerRecorder{mock}
	return mock
}

func (_m *MockManager) EXPECT() *_MockManagerRecorder {
	return _m.recorder
}

func (_m *MockManager) AddUserToOrg(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "AddUserToOrg", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) AddUserToOrg(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddUserToOrg", arg0, arg1)
}

func (_m *MockManager) AddUserToOrgRole(_param0 string, _param1 string, _param2 string) error {
	ret := _m.ctrl.Call(_m, "AddUserToOrgRole", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) AddUserToOrgRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddUserToOrgRole", arg0, arg1, arg2)
}

func (_m *MockManager) AddUserToSpaceRole(_param0 string, _param1 string, _param2 string) error {
	ret := _m.ctrl.Call(_m, "AddUserToSpaceRole", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) AddUserToSpaceRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddUserToSpaceRole", arg0, arg1, arg2)
}

func (_m *MockManager) AssignQuotaToOrg(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "AssignQuotaToOrg", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) AssignQuotaToOrg(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AssignQuotaToOrg", arg0, arg1)
}

func (_m *MockManager) AssignQuotaToSpace(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "AssignQuotaToSpace", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) AssignQuotaToSpace(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AssignQuotaToSpace", arg0, arg1)
}

func (_m *MockManager) AssignSecurityGroupToSpace(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "AssignSecurityGroupToSpace", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) AssignSecurityGroupToSpace(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AssignSecurityGroupToSpace", arg0, arg1)
}

func (_m *MockManager) CreateOrg(_param0 string) error {
	ret := _m.ctrl.Call(_m, "CreateOrg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) CreateOrg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateOrg", arg0)
}

func (_m *MockManager) CreatePrivateDomain(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "CreatePrivateDomain", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) CreatePrivateDomain(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePrivateDomain", arg0, arg1)
}

func (_m *MockManager) CreateQuota(_param0 cloudcontroller.QuotaEntity) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateQuota", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) CreateQuota(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateQuota", arg0)
}

func (_m *MockManager) CreateSecurityGroup(_param0 string, _param1 string) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateSecurityGroup", _param0, _param1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) CreateSecurityGroup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSecurityGroup", arg0, arg1)
}

func (_m *MockManager) CreateSpace(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "CreateSpace", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) CreateSpace(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSpace", arg0, arg1)
}

func (_m *MockManager) CreateSpaceQuota(_param0 cloudcontroller.SpaceQuotaEntity) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateSpaceQuota", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) CreateSpaceQuota(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSpaceQuota", arg0)
}

func (_m *MockManager) DeleteOrg(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteOrg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) DeleteOrg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteOrg", arg0)
}

func (_m *MockManager) DeleteOrgByName(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteOrgByName", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) DeleteOrgByName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteOrgByName", arg0)
}

func (_m *MockManager) DeletePrivateDomain(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeletePrivateDomain", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) DeletePrivateDomain(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePrivateDomain", arg0)
}

func (_m *MockManager) DeleteSpace(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteSpace", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) DeleteSpace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSpace", arg0)
}

func (_m *MockManager) GetCFUsers(_param0 string, _param1 string, _param2 string) (map[string]string, error) {
	ret := _m.ctrl.Call(_m, "GetCFUsers", _param0, _param1, _param2)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) GetCFUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCFUsers", arg0, arg1, arg2)
}

func (_m *MockManager) ListAllOrgQuotas() (map[string]string, error) {
	ret := _m.ctrl.Call(_m, "ListAllOrgQuotas")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) ListAllOrgQuotas() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAllOrgQuotas")
}

func (_m *MockManager) ListAllPrivateDomains() (map[string]string, error) {
	ret := _m.ctrl.Call(_m, "ListAllPrivateDomains")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) ListAllPrivateDomains() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAllPrivateDomains")
}

func (_m *MockManager) ListAllSpaceQuotasForOrg(_param0 string) (map[string]string, error) {
	ret := _m.ctrl.Call(_m, "ListAllSpaceQuotasForOrg", _param0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) ListAllSpaceQuotasForOrg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAllSpaceQuotasForOrg", arg0)
}

func (_m *MockManager) ListOrgPrivateDomains(_param0 string) (map[string]string, error) {
	ret := _m.ctrl.Call(_m, "ListOrgPrivateDomains", _param0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) ListOrgPrivateDomains(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListOrgPrivateDomains", arg0)
}

func (_m *MockManager) ListOrgs() ([]*cloudcontroller.Org, error) {
	ret := _m.ctrl.Call(_m, "ListOrgs")
	ret0, _ := ret[0].([]*cloudcontroller.Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) ListOrgs() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListOrgs")
}

func (_m *MockManager) ListSecurityGroups() (map[string]string, error) {
	ret := _m.ctrl.Call(_m, "ListSecurityGroups")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) ListSecurityGroups() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSecurityGroups")
}

func (_m *MockManager) ListSpaces(_param0 string) ([]*cloudcontroller.Space, error) {
	ret := _m.ctrl.Call(_m, "ListSpaces", _param0)
	ret0, _ := ret[0].([]*cloudcontroller.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) ListSpaces(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSpaces", arg0)
}

func (_m *MockManager) QuotaDef(_param0 string, _param1 string) (*cloudcontroller.Quota, error) {
	ret := _m.ctrl.Call(_m, "QuotaDef", _param0, _param1)
	ret0, _ := ret[0].(*cloudcontroller.Quota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) QuotaDef(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QuotaDef", arg0, arg1)
}

func (_m *MockManager) RemoveCFUser(_param0 string, _param1 string, _param2 string, _param3 string) error {
	ret := _m.ctrl.Call(_m, "RemoveCFUser", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) RemoveCFUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveCFUser", arg0, arg1, arg2, arg3)
}

func (_m *MockManager) UpdateQuota(_param0 string, _param1 cloudcontroller.QuotaEntity) error {
	ret := _m.ctrl.Call(_m, "UpdateQuota", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) UpdateQuota(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateQuota", arg0, arg1)
}

func (_m *MockManager) UpdateSecurityGroup(_param0 string, _param1 string, _param2 string) error {
	ret := _m.ctrl.Call(_m, "UpdateSecurityGroup", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) UpdateSecurityGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSecurityGroup", arg0, arg1, arg2)
}

func (_m *MockManager) UpdateSpaceQuota(_param0 string, _param1 cloudcontroller.SpaceQuotaEntity) error {
	ret := _m.ctrl.Call(_m, "UpdateSpaceQuota", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) UpdateSpaceQuota(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSpaceQuota", arg0, arg1)
}

func (_m *MockManager) UpdateSpaceSSH(_param0 bool, _param1 string) error {
	ret := _m.ctrl.Call(_m, "UpdateSpaceSSH", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) UpdateSpaceSSH(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSpaceSSH", arg0, arg1)
}
